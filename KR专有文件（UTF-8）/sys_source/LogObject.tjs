//------------------------------------------------------------------------------
// Note : BASE ADV SYSTEM
// Data : 2010/05/21
// File : LogObject.tjs
// Creator : Kazuyuki Uchino
// Memo : LogObjec
//------------------------------------------------------------------------------
@if (__LOGOBJECT_TJS__== 0)
@set(__LOGOBJECT_TJS__ = 1)

class _LOGOBJECT extends BaseObject {
	
	/*-----------------------------------------
	■ パラメータ
	-----------------------------------------*/
	var LogFrame;			//フレームレイヤ
	
	var CursorLayer;		//カーソルレイヤ
	
	var RepeartLayer = [];	//リピートレイヤ
	
	var LogText      = [];	//TEXTレイヤ
	
	var LogName      = [];	//NAMEレイヤ
	
	var LogVoice     = [];	//VOICE ARRAY
	
	var LogVoicePan  = [];	//VOICE PAN ARRAY
	
	var CursorRes;			//カーソルリソース
	
	var RepeartRes;			//リピートリソース
	
	var TempActive;			//アクティブオブジェクトを保存
	
	var Messobj;			//Message Object
	
	var MapRes;				//Map Value
	
	var TempRes;			//Temp Value
	
	var CursorMove;			//カーソル制御フラグ
	
	var UpdateValue;		//更新値
	
	var nCURSOR_TOP;		//カーソルの再上値
	
	var nCURSOR_DOWN;		//カーソルの再下値
	
	var nPAGENUM     = 5;	//１ＰＡＧＥに表示できるメッセージ数
	
	var NowDrawCnt   =void;	//現在の描画カウント
	
	var RepearVoice;		//リピート音声用レイヤ
	
	var ReturnButton;		//RETURN BUTTON
	
	var PageUpButton;		//PAGEUP BUTTON
	
	var TextUpButton;		//TEXT UP BUTTON
	
	var TextDownButton;		//TEXT DOWN BUTTON
	
	var PageDownButton;		//PAGEDOWN BUTTON
	
	var ReturnRes;			//リターンボタン
	
	var JumpRes;			//ジャンプリソース
	
	var jump_inx = [];		//JUMP INDEX
	
	var jump_log = [];		//JUMP LOG
	
	var jump_button=[];		//JUMP BUTTON
	
	var jump_thumb =[];		//JUMP用サムネイル
	
	var NowLogCnt;			//現在のLOGカウント
	
	var NowLogNum;			//現在のLOG数
	
	var jump_logparam = [];	//選択したLOGパラメータ
	
	var jump_screen   = [];	//JUMP用スクリーン
	
	var LogDrawNumber;		//LOGTEXT描画開始番号
	
	var jump_arr;			//現在のJUMP配列
	
	var LogIndexRes;		//ログインデックス変更リソース
	
	var LogIndexButton= [];	//LOGインデックスボタン
	
	var LogIndexText;		//LOGインデックステキスト
	
	
	
	
	
	
	
	
	
	
	/*-----------------------------------------
	○ コンストラクタ
	-----------------------------------------*/
	function _LOGOBJECT(win, pri, MesObj)
	{
		super.BaseObject(win, pri);
		
		//表示していたオブジェクトによって変更する
		if(MainObj.SelObj.SelectMess.count){
			MainObj.SelObj.RightMouseUpAction();
		}else{
			MesObj.RightMouseUpAction();
		}
		
		//フレームを消去
		MesObj.MessFrame.visible     = false;
		MesObj.MessHidden.visible    = false;
		
		//BORDを消しておく
		if(MesObj.QuickDataBord !== void){
			MesObj.QuickDataBord.visible = false;
		}
		
		MesObj.MapReg                = 0;
		MesObj.TempReg               = 0;
		
		//ジャンプ用スクリーン
		for(var i=0; i<nIMAGEMAX; i++){
			jump_screen[i]         = new BaseLayer(win, pri,0,0,10,10);
			jump_screen[i].visible = false;
		}
		
		//フレームレイヤ
		win.add(LogFrame    = new BaseLayer(win, pri,0,0,0,0,"frm_log01.png"));
		
		LogFrame.loadProvinceImage("clm_log.png");
		
		
		
		//カーソルリソース
		CursorRes  = new BaseLayer(win, pri,0,0,0,0,"frm_log03.png");
		
		CursorRes.visible = false;
		
		//リピートリソース
		RepeartRes = new BaseLayer(win, pri,0,0,0,0,"frm_log02.png");
		
		RepeartRes.visible = false;
		
		//リターンリソース
		ReturnRes  = new BaseLayer(win, pri,0,0,0,0,"frm_log05.png");
		
		ReturnRes.visible = false;
		
		//ジャンプリソース
		JumpRes    = new BaseLayer(win, pri,0,0,0,0,"frm_log06.png");
		
		JumpRes.visible = false;
		
		//ログインデックス変更リソース
		LogIndexRes= new BaseLayer(win, pri,0,0,0,0,"frm_log07.png");
		
		LogIndexRes.visible = false;
		
		//カーソルレイヤ
		win.add(CursorLayer = new BaseLayer(win, LogFrame,1254,580,CursorRes.width\3,CursorRes.height));
		
		CursorLayer.copyRect(0,0,CursorRes,0,0,CursorRes.width\3,CursorRes.height);
		
		
		//カーソルの一番上の値を入れておく
		nCURSOR_TOP  = 80;
		
		//カーソルの一番下の値を入れておく
		nCURSOR_DOWN = CursorLayer.top;
		
		//１ログの高さ
		var nLOG_LINE_HEIGHT = 132;
		
		for(var i=0; i<nPAGENUM; i++)
		{
			//リピートレイヤ
			win.add(RepeartLayer[i] = new BaseLayer(win, LogFrame,1043,46+(i*140),RepeartRes.width,RepeartRes.height\4));
			
			RepeartLayer[i].copyRect(0,0,RepeartRes,0,0,RepeartRes.width,RepeartRes.height\4);
			
			//JUMP ボタン
			win.add(jump_button[i] = new BaseLayer(win, LogFrame,1043,100+(i*140),RepeartRes.width,RepeartRes.height/4));
			
			jump_button[i].copyRect(0,0,JumpRes,0,0,JumpRes.width,JumpRes.height\4);
			
			
			//TEXTレイヤ
			win.add(LogText[i]      = new BaseLayer(win, pri,nLOG_XPOS,(nLOG_YPOS+(i*nLOG_LINE_HEIGHT)),nLOG_WIDTH,nLOG_HEIGHT));
			
			//NAMEレイヤ
			win.add(LogName[i]      = new BaseLayer(win, pri,nNAME_LOG_XPOS,(nNAME_LOG_YPOS+(i*nLOG_LINE_HEIGHT)),nNAME_LOG_WIDTH,nNAME_LOG_HEIGHT));
			
			//FONT サイズ
			LogText[i].font.height = nLOG_FONTSIZE;
			
			LogName[i].font.height = nLOG_FONTSIZE;
			
			LogText[i].font.face   = stFONTNAME;
			
			LogName[i].font.face   = stFONTNAME;
			
			LogName[i].font.bold   = nLOG_FONTBOLD;
			
			LogText[i].font.bold   = nLOG_FONTBOLD;
			
			
			RepeartLayer[i].visible= false;
			
			jump_button[i].visible= false;
			
			
			/*
			//JUMP サムネイル
			win.add(jump_thumb[i] = new BaseLayer(
												win,
												LogFrame,
												nLOG_THUM_XPOS,
												(nLOG_THUM_YPOS+((nLOG_LINE_HEIGHT-nLOG_THUM_HEI)\2))+(i*nLOG_LINE_HEIGHT),
												nLOG_THUM_WID,
												nLOG_THUM_HEI
												));
			//レイヤは非表示にしておく
			jump_thumb[i].visible = false;
			*/
		}
		
		//PAGE UP
		PageUpButton = new BaseLayer(win,LogFrame,1254,26,26,26);
		
		PageUpButton.copyRect(0,0,ReturnRes,0,0,26,26);
		
		//TEXT UP
		TextUpButton = new BaseLayer(win,LogFrame,1254,52,26,26);
		
		TextUpButton.copyRect(0,0,ReturnRes,26,0,26,26);
		
		//TEXT DOWN
		TextDownButton = new BaseLayer(win,LogFrame,1254,642,26,26);
		
		TextDownButton.copyRect(0,0,ReturnRes,26*2,0,26,26);
		
		//PAGE DOWN
		PageDownButton = new BaseLayer(win,LogFrame,1254,668,26,26);
		
		PageDownButton.copyRect(0,0,ReturnRes,26*3,0,26,26);
		
		//リターンボタン
		ReturnButton = new BaseLayer(win,LogFrame,1254,694,26,26);
		
		ReturnButton.copyRect(0,0,ReturnRes,26*4,0,26,26);
		
		//インデックスボタン
		for(var i=0; i<4; i++){
			var x = 0;
			switch(i){
				case 0:{
					x = 1039;
				}break;
				case 1:{
					x = 1065;
				}break;
				case 2:{
					x = 1228;
				}break;
				case 3:{
					x = 1254;
				}break;
			}
			
			LogIndexButton[i] = new BaseLayer(win,LogFrame,x,0,26,26);
			
			LogIndexButton[i].copyRect(0,0,LogIndexRes,i*26,0,26,26);
		}
		
		//ログテキスト
		LogIndexText = new BaseLayer( win,LogFrame,1094,1,130,28 );
		
		LogIndexText.font.height = nLOG_INDEX_SIZE;
		
		LogIndexText.font.face   = stFONTNAME;
		
		
		
		//カーソル制御フラグをクリアする
		CursorMove  = false;
		
		//リピート音声用レイヤを作成しておく
		RepearVoice = new Array();
		for(var i=0; i<nVOICE_MAXNUM; i++){
			RepearVoice[i] = new _SOUNDOBJECT("voice", win);
			//VOLUME設定
			RepearVoice[i].SetState(5, s["voice_vol"]);
		}
		
		//INDEXを戻す
		win.LogJumpObj.SetLogUseIndex();
		
		//画面作成関数
		ScreenCreate();
		
	}
	
	
	
	
	
	/*-----------------------------------------
	○デストラクタ
	-----------------------------------------*/
	function finalize()
	{
		super.finalize();
		
		invalidate LogFrame;
		
		//カーソルレイヤ
		invalidate CursorLayer;
		
		invalidate ReturnRes;
		
		invalidate ReturnButton;
		
		invalidate PageUpButton;
		
		invalidate TextUpButton;
		
		invalidate TextDownButton;
		
		invalidate PageDownButton;
		
		
		for(var i=0; i<nPAGENUM; i++){
			//リピートレイヤ
			invalidate RepeartLayer[i];
			
			//TEXTレイヤ
			invalidate LogText[i];
			
			//NAMEレイヤ
			invalidate LogName[i];
			
			//JUMPレイヤ
			invalidate jump_button[i];
			
			//JUMP サムネイル
			//invalidate jump_thumb[i];
		}
		
		//カーソルリソース
		invalidate CursorRes;
		
		//リピートリソース
		invalidate RepeartRes;
		
		//ジャンプリソース
		invalidate JumpRes;
		
		//インデックス変更リソース
		invalidate LogIndexRes;
		
		for(var i=0; i<LogIndexButton.count; i++)invalidate LogIndexButton[i];
		
		//インデックステキスト
		invalidate LogIndexText;
		
		//リピート音声を停止
		for(var i=0; i<nVOICE_MAXNUM; i++){
			RepearVoice[i].FileStop();
			//リピートレイヤ
			invalidate RepearVoice[i];
		}
		
		invalidate RepearVoice;
		
		//ジャンプ用スクリーン
		for(var i=0; i<nIMAGEMAX; i++){
			if(jump_screen[i] !== void)invalidate jump_screen[i];
		}
		
		
		//ガベージを強制的に動かす
		System.doCompact();
	}
	
	
	
	
	
	
	/*-----------------------------------------
	■ 画面作成関数
	-----------------------------------------*/
	function ScreenCreate()
	{
		//現在のJUMPデータを取得
		jump_arr = MainWnd.LogJumpObj.GetJumpDataIndex();
		
		//カウントと数の保存
		NowLogNum = jump_arr.count;
		
		CursorLayer.top = nCURSOR_DOWN;
		
		//メッセージオブジェクトをCOPYしておく
		Messobj     = MainWnd.MessObj;
		
		//テキスト更新値 画面更新回数は現在のログ数 - １PAGEの表示数
		UpdateValue = 0;
		
		//*
		if(s["logmax"] == 0){
		//全LOGTYPE
			if( 0 < (NowLogNum - nPAGENUM) ){
				UpdateValue = (nCURSOR_DOWN - nCURSOR_TOP) / (NowLogNum - nPAGENUM);
			}
		}else{
		//制限あり
			if(jump_arr.count < s["logmax"]){
			//MAXまでたまっていない
				UpdateValue    = (nCURSOR_DOWN - nCURSOR_TOP) / (NowLogNum - nPAGENUM);
			}else{
			//MAXまでたまっている
				UpdateValue    = (nCURSOR_DOWN - nCURSOR_TOP) / (s["logmax"] - nPAGENUM);
			}
		}
		//*/
		
		
		//テキストレイヤをクリアしておく
		for(var i=0; i<nPAGENUM; i++){
			//LAYER CLEAR
			LogText[i].colorRect(0, 0, LogText[i].width, LogText[i].height, 0, -255);
			
			LogName[i].colorRect(0, 0, LogName[i].width, LogName[i].height, 0, -255);
			
			//JUMPボタン
			jump_button[i].visible = false;
			
			//リピート消去
			RepeartLayer[i].visible = false;
		}
		
		//レジスタをクリア
		TempRes = 0;
		MapRes  = 0;
		
		//画像消去
		LogScreenErase();
		
		//ログインデックス名を変更
		SetIndexName();
		
		//テキスト表示
		SetDrawLogText( NowLogNum, Messobj );
	}
	
	
	
	
	
	/*-----------------------------------------
	■ Default Func
	-----------------------------------------*/
	function DefaultAction()
	{
		//音声クリック処理
		for(var i=0; i<RepeartLayer.count; i++){
			if(RepeartLayer[i].PaintFlag){
				
				Wait( nBUTTON_WAIT );
				
				RepeartLayer[i].PaintFlag = false;
				
				//音声再生
				ActionFunc(i);
				
				return;
			}
		}
		
		
		//JUMP処理
		for(var i=0; i<jump_button.count; i++){
			if(jump_button[i].PaintFlag){
				
				Wait( nBUTTON_WAIT );
				
				jump_button[i].PaintFlag = false;
				
				//JUMP処理
				JumpFunc(i);
				
				return;
			}
		}
		
		
		
		//INDEX変更処理
		for(var i=0; i<LogIndexButton.count; i++){
			if(LogIndexButton[i].PaintFlag){
				
				Wait( nBUTTON_WAIT );
				
				LogIndexButton[i].PaintFlag = false;
				
				//INDEX変更処理
				LogIndexFunc( i );
				
				return;
			}
		}
		
		
		
		
		//リターン処理
		if(ReturnButton.PaintFlag){
			
			ReturnButton.PaintFlag = false;
			
			Wait(nBUTTON_WAIT);
			
			RightMouseUpAction();
			
			return;
		}
		
		
		
		//各ボタン処理
		if( (PageUpButton.PaintFlag)   || (TextUpButton.PaintFlag) ||
			(TextDownButton.PaintFlag) || (PageDownButton.PaintFlag)
		){
			PageUpButton.PaintFlag   =  TextUpButton.PaintFlag  = false;
			TextDownButton.PaintFlag = PageDownButton.PaintFlag = false;
			
			Wait(nBUTTON_WAIT);
			
			LogButtonWork( MapRes );
			
			return;
		}
		
		
		
		//MAPを取得する
		MapRes = LogFrame.GetProvincePixel();
		
		//カーソル制御フラグON中はカーソル関数だけ
		if(CursorMove){
			
			CursorMoveFunc(PriLayer.cursorY);
			
			return;
		}
		
		
		//カーソルフラグを寝かす
		CursorMove = false;
		
		
		if(MapRes != TempRes)
		{
			CursorFunc();
			
			ClearFunc();
		}
		
		TempRes = MapRes;
		
		
		//キーボード処理
		
		
	}
	
	
	
	
	
	
	
	/*-----------------------------------------
	◆イベント取得関数
	
	引数：
	なし
	
	説明：
	Mouse Upを処理するハンドラ
	
	-----------------------------------------*/
	function LeftMouseUpAction()
	{
		CursorMove = false;
		
		if((0 < MapRes) && (MapRes <= nPAGENUM)){
		//voice
			if(RepeartLayer[MapRes-1].visible){
				//レイヤー更新
				RepeartLayer[MapRes-1].copyRect(0,0,RepeartRes,0,(RepeartLayer[MapRes-1].height*2),RepeartRes.width,RepeartRes.height\4);
				
				RepeartLayer[MapRes-1].update();
			}
		}else if(MapRes == 7){
		//Return
			ReturnButton.copyRect(0,0,ReturnRes,26*4,26*2,26,26);
			
			ReturnButton.update();
			
		}else if((0 < MapRes) && (MapRes < 12)){
			switch(MapRes){
				case 8:{
				//PAGE 更新
					PageUpButton.copyRect(0,0,ReturnRes,0,PageUpButton.height*2);
					PageUpButton.update();
					//KeyUpAction(VK_PRIOR, 0, 0);
				}break;
				case 9:{
				//1つ上に上げる
					TextUpButton.copyRect(0,0,ReturnRes,26,TextUpButton.height*2);
					TextUpButton.update();
					//KeyUpAction(VK_UP, 0, 0);
				}break;
				case 10:{
				//1つ下に上げる
					TextDownButton.copyRect(0,0,ReturnRes,26*2,TextDownButton.height*2);
					TextDownButton.update();
					//KeyUpAction(VK_DOWN, 0, 0);
				}break;
				case 11:{
				//PAGE 更新
					PageDownButton.copyRect(0,0,ReturnRes,26*3,PageDownButton.height*2);
					PageDownButton.update();
					//KeyUpAction(VK_NEXT, 0, 0);
				}break;
			}
		}else if((0 < MapRes) && (MapRes < 17)){
		//JUMP
			//レイヤー更新
			jump_button[MapRes-12].copyRect(0,0,JumpRes,0,(jump_button[MapRes-12].height*2),JumpRes.width,JumpRes.height\4);
			
			jump_button[MapRes-12].update();
			
		}else if((0 < MapRes) && (16 < MapRes)){
		//LOG 変更
			LogIndexButton[MapRes-17].copyRect(0,0,LogIndexRes,(LogIndexRes.width\4)*(MapRes-17),LogIndexButton[MapRes-17].height*2,LogIndexRes.width\4,LogIndexRes.height\4);
			
			LogIndexButton[MapRes-17].update();
		}
	}
	
	
	
	
	
	/*-----------------------------------------
	◆イベント取得関数
	
	引数：
	なし
	
	説明：
	Mouse Downを処理するハンドラ
	
	-----------------------------------------*/
	function LeftMouseDownAction()
	{
		if(MapRes == 6 && CursorLayer.visible)
		{
			CursorMove = true;
		}
	}
	
	
	
	
	
	
	
	/*-----------------------------------------
	◆イベント取得関数
	
	引数：
	なし
	
	説明：
	Mouse Upを処理するハンドラ
	
	-----------------------------------------*/
	function RightMouseUpAction()
	{
		//タイマー停止
		MainWnd.DefaultTimer.enabled = false;
		
		//削除処理
		DeleteWork( LogDeleteFunc );
		
	}
	
	
	
	
	
	/*-----------------------------------------
	◆イベント取得関数
	
	引数：
	shift	同時キー
	
	delta	方向：正:奥　負:手前
	
	x		X座標
	
	y		Y座標
	
	説明：
	Mouse Wheelを処理するハンドラ
	
	-----------------------------------------*/
	function MouseWheelAction(shift, delta, x, y)
	{
		super.MouseWheelAction(shift, delta, x, y);
		
		if(!UpdateValue)return;
		
		//var scroll_value = UpdateValue;
		
		//更新値が１未満なら１に変更
		//if(UpdateValue < 1){ scroll_value = 1; }
		
		if(delta < 0){
		//下方向
			//CursorMoveFunc(CursorLayer.top += scroll_value);
			KeyUpAction( VK_DOWN, false, false);
		}else{
		//上方向
			//CursorMoveFunc(CursorLayer.top -= scroll_value);
			KeyUpAction( VK_UP, false, false);
		}
	}
	
	
	
	
	
	
	/*-----------------------------------------
	■ KEY UP
	-----------------------------------------*/
	function KeyUpAction(key, shift, process)
	{
		switch(key){
			case VK_RETURN:{
			//return
			//altキーが押されていたらここまで
			if(shift & ssAlt)return;
				LeftMouseUpAction();
			}break;
			case VK_UP:{
			//1つ上に上げる
				//1PAGE 以上ログがある
				if(NowLogNum <= nPAGENUM)return;
				//現状のLOG数より大きい数字は指定できない
				if((LogDrawNumber-1) < nPAGENUM)return;
				
				//TEXT更新
				SetDrawLogText(LogDrawNumber-1 , Messobj);
				//カーソル位置移動
				SetLogCursorPosition( LogDrawNumber );
				
			}break;
			case VK_DOWN:{
			//1つ下に上げる
				//1PAGE 以上ログがある
				if(NowLogNum <= nPAGENUM)return;
				//現状のLOG数より大きい数字は指定できない
				if( (NowLogNum < (LogDrawNumber+1)) )return;
				
				//TEXT更新
				SetDrawLogText(LogDrawNumber+1 , Messobj);
				//カーソル位置移動
				SetLogCursorPosition( LogDrawNumber );
				
			}break;
			case VK_PRIOR:{
			//PAGE 更新
				//1PAGE 分無い場合はここまで
				if( NowLogNum <= nPAGENUM  )return;
				
				if((LogDrawNumber-nPAGENUM) < nPAGENUM){
					LogDrawNumber = nPAGENUM;
				}else{
					LogDrawNumber -= nPAGENUM;
				}
				//TEXT更新
				SetDrawLogText(LogDrawNumber , Messobj);
				//カーソル位置移動
				SetLogCursorPosition( LogDrawNumber );
				
			}break;
			case VK_NEXT:{
			//PAGE 更新
				//1PAGE 分無い場合はここまで
				if( NowLogNum <= nPAGENUM  )return;
				
				if( NowLogNum < (LogDrawNumber+nPAGENUM) ){
					LogDrawNumber = NowLogNum;
				}else{
					LogDrawNumber += nPAGENUM;
				}
				//TEXT更新
				SetDrawLogText(LogDrawNumber , Messobj);
				//カーソル位置移動
				SetLogCursorPosition( LogDrawNumber );
				
			}break;
			case VK_F11:{
				//INDEXをずらす
				if(!MainWnd.LogJumpObj.ChageLogIndex( false ))return;
				
				//画面再作成
				ScreenCreate();
				
			}break;
			case VK_F12:{
				//next
				
				//INDEXをずらす
				if(!MainWnd.LogJumpObj.ChageLogIndex( true ))return;
				
				//画面再作成
				ScreenCreate();
				
			}break;
		}
	}
	
	
	
	
	
	
	/*-----------------------------------------
	◆ログボタン処理
	
	引数：
	
	説明：
	ログボタン処理
	-----------------------------------------*/
	function LogButtonWork( res )
	{
		switch(MapRes){
			case 8:{
			//PAGE 更新
				PageUpButton.copyRect(0,0,ReturnRes,0,PageUpButton.height*1);
				KeyUpAction(VK_PRIOR, 0, 0);
			}break;
			case 9:{
			//1つ上に上げる
				TextUpButton.copyRect(0,0,ReturnRes,26,TextUpButton.height*1);
				KeyUpAction(VK_UP, 0, 0);
			}break;
			case 10:{
			//1つ下に上げる
				TextDownButton.copyRect(0,0,ReturnRes,26*2,TextDownButton.height*1);
				KeyUpAction(VK_DOWN, 0, 0);
			}break;
			case 11:{
			//PAGE 更新
				PageDownButton.copyRect(0,0,ReturnRes,26*3,PageDownButton.height*1);
				KeyUpAction(VK_NEXT, 0, 0);
			}break;
		}
	}
	
	
	
	
	
	
	/*-----------------------------------------
	◆ログテキスト表示
	
	引数：
	
	説明：
	ログテキストを表示する
	-----------------------------------------*/
	function SetDrawLogText(startlognum, mesobj)
	{
		var num = startlognum;
		
		if(NowLogNum <= nPAGENUM){
		//1画面未満
			//開始INDEX
			startlognum = 0;
			
			//カーソルを消しておく
			CursorLayer.visible = false;
			
		}else{
			//ログ描画開始番号
			LogDrawNumber = startlognum;
			
			//開始INDEX
			startlognum -= nPAGENUM;
			
			num = nPAGENUM;
			
			//カーソルを消しておく
			CursorLayer.visible = true;
		}
		
		
		
		
		for(var i=0;i<num;i++)
		{
			//保存したサムネイルからログデータを取り出す
			//※辞書配列で戻される
			var LogStatus = GetLogStatus( (startlognum + i), i );
			
			//ログ情報が取得出来ない場合は表示しない
			if(LogStatus === void)continue;
			
			//TEXT 取得
			var logtext = LogStatus["mess"];
			//NAME
			var logname = LogStatus["name"];
			
			//VOICE
			var logvoice     = [];
			var logvoice_pan = [];
			for(var i=0; i<nVOICE_MAXNUM; i++){
				if(LogStatus["voice"+i] === void)continue;
				
				logvoice_pan[i]= LogStatus["voicepan"+i];
				logvoice[i]    = LogStatus["voice"+i];
			}
			
			//LAYER CLEAR
			LogText[i].colorRect(0, 0, LogText[i].width, LogText[i].height, 0, -255);
			
			LogName[i].colorRect(0, 0, LogName[i].width, LogName[i].height, 0, -255);
			
			var x = nLOG_FUKURO_WIDTH, y = nLOG_FUKURO_WIDTH, linenum = 0;
			
			for(var t=0; t<logtext.length; t++){
				
				//最大行文字数
				if((linenum == scDRAWMAX) || (logtext[t] == "／")){
					x = nLOG_FUKURO_WIDTH;
					linenum = 0;
					//改行コードならINDEXを進める
					if(logtext[t] == "／"){
						while(logtext[t] == "／"){
							y += LogText[i].font.height + nLOG_GYOUKAN;
							++t;
						}
					}else{
						y += LogText[i].font.height + nLOG_GYOUKAN;
					}
				}
				
				//文字描画
				TextDraw(LogText[i], x, y, logtext[t]);
				
				//カウントをあげておく
				if((#logtext[t]) <= 122){
					linenum += 0.5;
				}else{
					++linenum;
				}
				
				//X座標
				//-1しているのは --がくっつかないから
				x += LogText[i].font.getEscWidthX(logtext[t]) + nLOG_KERNING;
				
			}
			
			
			
			//NAME
			if(logname != "心の声")	{
				//文字描画
				TextDraw(LogName[i], nLOG_FUKURO_WIDTH, nLOG_FUKURO_WIDTH, logname);
			}
			
			
			//VOICE NAME
			LogVoice[i]   = logvoice;
			LogVoicePan[i]= logvoice_pan;
			
			/*
			//サムネイル表示
			if( ResourceCheck( jump_inx[i] ) ){
				jump_thumb[i].loadImages(jump_inx[i]);
				jump_thumb[i].setSizeToImageSize();
				jump_thumb[i].visible = true;
			}else{
				jump_thumb[i].visible = false;
			}
			*/
			
			if(0 < logvoice.count){
				RepeartLayer[i].visible = true;
			}else{
				RepeartLayer[i].visible = false;
			}
			
			//JUMP用に全表示
			jump_button[i].visible = true;
			
		}
		
	}
	
	
	
	
	
	
	
	/*-----------------------------------------
	■ TEXT　DRAW
	-----------------------------------------*/
	function TextDraw(drawlayer, x, y, str, color = nLOG_FONTCOLOR)
	{
		//袋文字処理
		if(nLOG_FUKURO == true){
			
			//袋文字テキスト描画
			
			for(var i=0; i<=nLOG_FUKURO_WIDTH; i++){
				drawlayer.drawText(x+i, y  , str, nLOG_FUKUROCOLOR);
				drawlayer.drawText(x-i, y  , str, nLOG_FUKUROCOLOR);
				drawlayer.drawText(x  , y-i, str, nLOG_FUKUROCOLOR);
				drawlayer.drawText(x  , y+i, str, nLOG_FUKUROCOLOR);
				
				if((nLOG_FUKURO_WIDTH-1) == i){
					drawlayer.drawText(x+i, y-i, str, nLOG_FUKUROCOLOR);
					drawlayer.drawText(x+i, y+i, str, nLOG_FUKUROCOLOR);
					drawlayer.drawText(x-i, y-i, str, nLOG_FUKUROCOLOR);
					drawlayer.drawText(x-i, y+i, str, nLOG_FUKUROCOLOR);
				}
			}
			
		}
		
		
		//テキスト描画
		drawlayer.drawText(
			x, 
			y, 
			str, 
			nLOG_FONTCOLOR, 
			0xff, 
			true, 
			nLOG_SHADOW,
			nLOG_SHADOWCOLOR,
			0,
			nLOG_SHADOW_WIDTH,
			nLOG_SHADOW_HEIGHT
		);
		
	}
	
	
	
	
	
	
	
	
	
	/*-----------------------------------------
	◆カーソル関数
	
	引数：
	
	-----------------------------------------*/
	function CursorFunc()
	{
		if(!MapRes){
			//画像消去
			LogScreenErase();
			return;
		}
		
		switch (MapRes){
		case 1://VOICE 01
		case 2://VOICE 02
		case 3://VOICE 03
		case 4://VOICE 04
		case 5:{//VOICE 05
			
			if(RepeartLayer[MapRes-1].visible){
				//画面表示
				LogScreenDraw( MapRes-1 );
				RepeartLayer[MapRes-1].copyRect(0,0,RepeartRes,0,RepeartLayer[MapRes-1].height,RepeartRes.width,RepeartRes.height/4);
			}
			
		}break;
		
		case 6:{//スクロール
			CursorLayer.copyRect(0,0,CursorRes,(CursorRes.width/3),0,CursorRes.width/3,CursorRes.height);
		}break;
		case 7:{//戻り
			ReturnButton.copyRect(0,0,ReturnRes,26*4,26,26,26);
		}break;
		
		case 8:{//PAGE UP
			//1PAGE 分無い場合はここまで
			//if( NowLogNum <= nPAGENUM  )return;
			
			PageUpButton.copyRect(0,0,ReturnRes,0,PageUpButton.height,PageUpButton.width,PageUpButton.height);
		}break;
		case 9:{//TEXT UP
			//1PAGE 以上ログがある
			//if(NowLogNum <= nPAGENUM)return;
			
			//現状のLOG数より大きい数字は指定できない
			//if((LogDrawNumber-1) <= nPAGENUM)return;
			
			TextUpButton.copyRect(0,0,ReturnRes,26,TextUpButton.height,TextUpButton.width,TextUpButton.height);
		}break;
		case 10:{//TEXT DOWN
			//1PAGE 以上ログがある
			//if(NowLogNum <= nPAGENUM)return;
			
			//現状のLOG数より大きい数字は指定できない
			//if( (NowLogNum < (LogDrawNumber+1)) )return;
			
			TextDownButton.copyRect(0,0,ReturnRes,26*2,TextDownButton.height,TextDownButton.width,TextDownButton.height);
		}break;
		case 11:{//PAGE DOWN
			//1PAGE 分無い場合はここまで
			//if( NowLogNum <= nPAGENUM  )return;
			
			PageDownButton.copyRect(0,0,ReturnRes,26*3,PageDownButton.height,PageDownButton.width,PageDownButton.height);
		}break;
		
		case 12://JUMP 01
		case 13://JUMP 02
		case 14://JUMP 03
		case 15://JUMP 04
		case 16:{//JUMP 05
			
			if(jump_button[MapRes-12].visible){
				//画面表示
				LogScreenDraw( MapRes-12 );
				jump_button[MapRes-12].copyRect(0,0,JumpRes,0,jump_button[MapRes-12].height,JumpRes.width,JumpRes.height/4);
			}
		}break;
		
		case 17://INDEX TOP
		case 18://INDEX PREV
		case 19://INDEX NEXT
		case 20:{//INDEX LAST
			LogIndexButton[MapRes-17].copyRect(0,0,LogIndexRes,(LogIndexRes.width\4)*(MapRes-17),LogIndexButton[MapRes-17].height,LogIndexRes.width\4,LogIndexRes.height\4);
		}break;
		
		}
	}
	
	
	
	
	
	
	
	/*-----------------------------------------
	◆クリア関数
	
	引数：
	
	-----------------------------------------*/
	function ClearFunc()
	{
		if(!TempRes){ return; }
		
		
		switch (TempRes){
		case 1://VOICE 01
		case 2://VOICE 02
		case 3://VOICE 03
		case 4://VOICE 04
		case 5:{//VOICE 05
			if(RepeartLayer[TempRes-1].visible){
				RepeartLayer[TempRes-1].copyRect(0,0,RepeartRes,0,0,RepeartRes.width,RepeartRes.height/4);
			}
		}break;
		
		case 6:{//スクロール
			CursorLayer.copyRect(0,0,CursorRes,0,0,CursorRes.width/3,CursorRes.height);
		}break;
		case 7:{//戻る
			ReturnButton.copyRect(0,0,ReturnRes,26*4,0,26,26);
		}break;

		case 8:{//PAGE UP
			PageUpButton.copyRect(0,0,ReturnRes,0,0,PageUpButton.width,PageUpButton.height);
		}break;
		case 9:{//TEXT UP
			TextUpButton.copyRect(0,0,ReturnRes,26,0,TextUpButton.width,TextUpButton.height);
		}break;
		case 10:{//TEXT DOWN
			TextDownButton.copyRect(0,0,ReturnRes,26*2,0,TextDownButton.width,TextDownButton.height);
		}break;
		case 11:{//PAGE DOWN
			PageDownButton.copyRect(0,0,ReturnRes,26*3,0,PageDownButton.width,PageDownButton.height);
		}break;
		
		case 12://JUMP 01
		case 13://JUMP 02
		case 14://JUMP 03
		case 15://JUMP 04
		case 16:{//JUMP 05
			
			if(jump_button[TempRes-12].visible){
				jump_button[TempRes-12].copyRect(0,0,JumpRes,0,0,JumpRes.width,JumpRes.height/4);
			}
		}break;
		
		case 17://INDEX TOP
		case 18://INDEX PREV
		case 19://INDEX NEXT
		case 20:{
			LogIndexButton[TempRes-17].copyRect(0,0,LogIndexRes,(LogIndexButton[TempRes-17].width)*(TempRes-17),0,LogIndexRes.width\4,LogIndexRes.height\4);
		}break;
		
		}
		
	}
	
	
	
	
	
	
	/*-----------------------------------------
	◆アクション関数
	
	引数：
	
	
	-----------------------------------------*/
	function ActionFunc( inx )
	{
		//音声再生
		for(var i=0; i<nVOICE_MAXNUM; i++){
			
			if(LogVoicePan[inx][i] === void)continue;
			
			RepearVoice[i].SetState(1, LogVoicePan[inx][i]);
			
			//文字を分割してIDを取る
			var filename = LogVoice[inx][i];
			var top = (filename.indexOf("_") + 1);
			var file = filename.substring(top, 1);
			file = file.toLowerCase();
			
			//音量調整
			RepearVoice[i].SetState(5, Messobj.GetCharVolume(file , true ) );
			
			RepearVoice[i].FilePlay(LogVoice[inx][i]);
		}
		
		//リピートカーソルを戻しておく
		RepeartLayer[inx].copyRect(0,0,RepeartRes,0,0,RepeartRes.width,RepeartRes.height/4);
		
	}
	
	
	
	
	
	/*-----------------------------------------
	■ JUMP処理
	-----------------------------------------*/
	function JumpFunc( inx )
	{
		//JUMPカーソルを戻しておく
		jump_button[inx].copyRect(0,0,JumpRes,0,0,JumpRes.width,JumpRes.height/4);
		
		//テキストタイプ
		MainWnd.LogJumpObj.LogJumpWork( this, jump_logparam[inx] );
		
	}
	
	
	
	
	
	/*-----------------------------------------
	■ LOGINDEX変更処理
	-----------------------------------------*/
	function LogIndexFunc( inx )
	{
		switch( inx ){
		case 0:{//INDEX TOP
			MainWnd.LogJumpObj.ChageLogIndex( -2 );
		}break;
		case 1:{//INDEX PREV
			MainWnd.LogJumpObj.ChageLogIndex( -1 );
		}break;
		case 2:{//INDEX NEXT
			MainWnd.LogJumpObj.ChageLogIndex( 1 );
		}break;
		case 3:{//INDEX LAST
			MainWnd.LogJumpObj.ChageLogIndex( 2 );
		}break;
		}
		
		//カーソルを戻しておく
		LogIndexButton[inx].copyRect(0,0,LogIndexRes,(LogIndexButton[inx].width)*(inx),0,LogIndexRes.width\4,LogIndexRes.height\4);
		
		//画面再作成
		ScreenCreate();
	}
	
	
	
	
	
	
	/*-----------------------------------------
	◆カーソル移動関数
	
	引数：
	
	-----------------------------------------*/
	function CursorMoveFunc( y )
	{
		//カーソルが表示されていない場合はここまで
		if(CursorLayer.visible == false)return;
		
		
		if(y < nCURSOR_TOP){
			CursorLayer.top = nCURSOR_TOP;
		}else if(nCURSOR_DOWN < y){
			CursorLayer.top = nCURSOR_DOWN;
		}else{
			CursorLayer.top = y;
		}
		
		//カーソル更新値から割り出した表示するテキスト番号
		var num     = 0;
		if((nCURSOR_DOWN - CursorLayer.top) != 0){
			num     = (int)((nCURSOR_DOWN - CursorLayer.top) / UpdateValue);
		}
		
		var cnt = NowLogNum - num;
		
		//更新数だけずらす
		if(CursorLayer.top == nCURSOR_TOP){
			cnt = nPAGENUM;
		}else if(CursorLayer.top == nCURSOR_DOWN){
			cnt = NowLogNum;
		}
		
		SetDrawLogText(cnt , Messobj);
	}
	
	
	
	
	
	
	
	/*-----------------------------------------
	◆カーソル移動関数
	
	・テキスト番号からカーソルの位置をずらす
	-----------------------------------------*/
	function SetLogCursorPosition( cnt )
	{
		var num         = NowLogNum - cnt;
		
		CursorLayer.top = nCURSOR_DOWN - (num * UpdateValue);
		
	}
	
	
	
	
	
	/*-----------------------------------------
	■ ログデータ取得関数
	-----------------------------------------*/
	function GetLogStatus( inx, jump_index )
	{
		//パラメータの参照をCOPY
		jump_logparam[jump_index] = jump_arr[inx];
		
		return jump_logparam[jump_index];
		
	}
	
	
	
	
	
	
	
	/*-----------------------------------------
	■ ログインデックス名の変更
	-----------------------------------------*/
	function SetIndexName()
	{
		LogIndexText.fillRect(0,0,LogIndexText.width,LogIndexText.height,0);
		
		var x = 0;
		
		//主にＤＥＢＵＧ用処理
		if(jump_arr[0] === void){
			x = (LogIndexText.width\2)-(("　　　　　".length*nLOG_INDEX_SIZE)\2);
			TextDraw( LogIndexText, (x < 0)? 0:x, 3, "　　　　　");
			return;
		}
		
		x = (LogIndexText.width\2)-((jump_arr[0]["daystring"].length*nLOG_INDEX_SIZE)\2);
		
		TextDraw( LogIndexText, (x < 0)? 0:x, 3, jump_arr[0]["daystring"]);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	/*-----------------------------------------
	■ 画像表示
	-----------------------------------------*/
	function LogScreenDraw( inx )
	{
		//ステータス
		var state = jump_logparam[inx];
		
		
		//画像関係の情報
		for(var i=0; i<nIMAGEMAX; i++)
		{
			var inx = "imagefile%d".sprintf(i);
			
			if( state[inx] !== void )
			{
				//取り敢えずCOPYしておく
				var image_name = state[inx];
				
				//立ち絵で裸パッチの場合
				if((state[inx].indexOf("CH_") != -1) && (s["ApendUse"] == true))
				{	//パッチ処理
					image_name = MainWnd.ImageObj.CommonApend( state[inx] );
				}
				
				
				
				//画像必須データ
				jump_screen[i].loadImages( image_name, state[inx+"_x"], state[inx+"_y"], state[inx+"_opacity"] );
				
				//拡張データ
				if(state[inx + "zoom"] !== void)
				{//ZOOM処理
					var templayer = new BaseLayer(MainWnd, MainWnd.PrimaryLayer,0,0,0,0, state[inx]);
					
					//サイズ変更
					jump_screen[i].imageWidth  = state[inx+"_width"];
					jump_screen[i].imageHeight = state[inx+"_height"];
					
					var oll = state[inx+"_x"] < 0 ? 0 : state[inx+"_x"];
					var olt = state[inx+"_y"] < 0 ? 0 : state[inx+"_y"];
					var olw = state[inx+"_x"] + state[inx+"_width"]  > jump_screen[i].imageWidth ? jump_screen[i].imageWidth - oll : state[inx+"_x"] + state[inx+"_width"] - oll;
					var olh = state[inx+"_y"] + state[inx+"_height"] > jump_screen[i].imageHeight ? jump_screen[i].imageHeight - olt : state[inx+"_y"] + state[inx+"_height"] - olt;
					
					if( (olw > 0 && olh > 0) )
					{
						var dleft = ((state[inx+"_x"] - oll) < 0) ? 0 : (state[inx+"_x"] - oll);
						var dtop  = ((state[inx+"_y"] - olt) < 0) ? 0 : (state[inx+"_y"] - olt);
						
						// 拡大縮小転送
						jump_screen[i].stretchCopy(dleft, dtop, state[inx+"_width"], state[inx+"_height"], templayer, 0, 0, templayer.imageWidth, templayer.imageHeight, state[inx + "zoom_type"]);
						// 移動先が右や下にはみ出る場合にちょっと無駄な転送が起こるかも
						
						jump_screen[i].setPos(state[inx+"_x"], state[inx+"_y"], state[inx+"_width"], state[inx+"_height"]);
					}
					
					invalidate templayer;
					
					templayer = void;
				}
				
				if( (state[inx + "_gray"]) || (state[inx + "_gamma"]) ){
				//グレイスケール & ガンマ補正処理
					
					if((state[inx + "_gray"]) == true){
					//グレイスケールに変換する
						jump_screen[i].doGrayScale();
					}
					
					//ガンマ値変更
					jump_screen[i].adjustGamma(state[inx + "_rgamma"], 0, 255, state[inx + "_ggamma"], 0, 255, state[inx + "_bgamma"], 0, 255);
					
				}else if(
					(state[inx].indexOf("CH_") != -1) && (state[inx].indexOf("EYE") == -1) && 
					((state["BuTimeSelect"] == 1) || (state["BuTimeSelect"] == 2) || 
					(state["BuTimeSelect"]  == 3) || (state["BuTimeSelect"] == 4))
				){	//立ち絵のガンマ処理
					
					//共通ガンマ処理
					MainWnd.ImageObj.CommonGammaColor( jump_screen[i], state["BuTimeSelect"] );
					
				}
				
				
				//明度・コントラスト補正処理
				if(state[inx + "_light_flag"]){
					jump_screen[i].light(state[inx + "_light"], state[inx + "_contrast"]);
				}
				
				//透明度の処理
				if(inx  == "imagefile0"){
				//保険のため０番は２５５固定
					jump_screen[i].opacity = 255;
				}else{
					jump_screen[i].opacity = state[inx + "_opacity"];
				}
				
				//画像を表示
				jump_screen[i].visible = true;
				
			}else if(state[inx+"_color_flag"] !== void){
				jump_screen[i].left = 0;
				jump_screen[i].top  = 0;
				jump_screen[i].setImageSize( nWND_WIDTH, nWND_HEIGHT );
				jump_screen[i].setSize( nWND_WIDTH, nWND_HEIGHT );
				jump_screen[i].fillRect( 0, 0, jump_screen[i].width, jump_screen[i].height, (0xff000000 | state[inx+"_color"]) );
				if( inx  == "imagefile0" ){
				//保険のため０番は２５５固定
					jump_screen[i].opacity = 255;
				}else{
					jump_screen[i].opacity = state[inx + "_opacity"];
				}
				jump_screen[i].visible = true;
			}else{
				//画像を非表示
				jump_screen[i].visible = false;
			}
			
		}
		
	}
	
	
	
	
	/*-----------------------------------------
	■ 画像消去
	-----------------------------------------*/
	function LogScreenErase()
	{
		//現在のアクティブが自分ではない場合は消去しない
		if(MainWnd.ActiveObj !== this)return;
		
		
		//非表示
		for(var i=0; i<nIMAGEMAX; i++){
			jump_screen[i].visible = false;
		}
	}
	
	
}









/*-----------------------------------------
■LOG オブジェクト削除関数
-----------------------------------------*/
function LogDeleteFunc()
{
	//アクティブオブジェクトを変更する
	MainObj.ActiveObj = MainObj.MessObj.LogObject.TempActive;
	
	//オブジェクトを削除する
	invalidate MainObj.MessObj.LogObject;
	
	MainObj.MessObj.LogObject = void;
	
	//ガベージを強制的に動かす
	System.doCompact();
	
	
	//表示していたオブジェクトによって変更する
	if(MainObj.LoadFlag == true){
		MainObj.LoadAction();
	}else{
		//表示していたオブジェクトによって変更する
		if(MainObj.SelObj.SelectMess.count){
			MainObj.SelObj.RightMouseUpAction();
		}else{
			MainObj.MessObj.RightMouseUpAction();
		}
		//タイマー再開
		MainObj.DefaultTimer.enabled = true;
	}
	
}


@endif

