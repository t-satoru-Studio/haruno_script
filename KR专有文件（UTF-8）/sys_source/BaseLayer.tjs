//------------------------------------------------------------------------------
// Note : BASE ADV SYSTEM
// Data : 2010/04/27
// File : BaseLayer.tjs
// Creator : Kazuyuki Uchino
// Memo : Base layer Class
//------------------------------------------------------------------------------

@if(__BASELAYER_TJS__ == 0)
@set(__BASELAYER_TJS__ = 1)

class BaseLayer extends Layer {
	
	/*-----------------------------------------
	◆ クラス オブジェクト
	-----------------------------------------*/
	//MainWindow
	var MainWnd;
	
	//プライマリレイヤ
	var PriLayer;
	
	//onPaint後に呼ばれるAction関数
	var ActionFunc;
	
	//Paint関数が呼ばれた関数
	var PaintFlag;
	
	//トランジション終了フラグ
	var TransitionEnd;
	
	//MapFile
	var MapFile;
	
	//ResourceFile
	var ResFile;
	
	
	
	
	
	
	
	
	/*-----------------------------------------
	◆コンストラクタ
	
	引数：
	wnd	メインウィンドウオブジェクト
	
	pri	プライマリレイヤ
	
	-----------------------------------------*/
	function BaseLayer(wnd, pri, px, py, szx, szy, file=void)
	{
		super.Layer(wnd, pri);
		
		//Main Window
		MainWnd      = wnd;
		
		PriLayer     = pri;
		
		//ResourceFile
		ResFile      = file;
		
		with(super){
			
			if(file !== void){
				.loadImages(file);
				.setSizeToImageSize();
			}else{
				.setSize(szx, szy);
			}
			.setPos(px, py);
			.visible = 1;
			.opacity = 255;
			.fillRect(px, py, szx, szy, 0);
			.update();
		}
		
		wnd.add(this);
		
		ActionFunc   = false;
		
		PaintFlag    = void;
		
		TransitionEnd= false;
		
		//DEBUG用にレイヤ数を数える
		@if( _DEBUG == 1)
		f["dbg_layer"] += 1;
		@endif
		
	}
	
	
	
	
	
	
	/*-----------------------------------------
	◆ファイナライズ
	
	引数：
	-----------------------------------------*/
	function finalize()
	{
		super.finalize();
		
		MapFile  = void;
		
		ResFile  = void;
		
		//DEBUG用にレイヤ数を数える
		@if( _DEBUG == 1)
		f["dbg_layer"] -= 1;
		@endif
		
		//ガベージを強制的に動かす
		System.doCompact();
		
	}
	
	
	
	
	/*-----------------------------------------
	●イベント関数
	
	引数：
	なし
	
	説明：
	描画される直前に呼ばれる関数
	
	-----------------------------------------*/
	function onPaint()
	{
		// 描画の直前に呼ばれる
		super.onPaint(...);
		
		//最初のUPDATEでfalseにする
		if(PaintFlag === void){
			PaintFlag = false;
		}else{
			//PaintFlagをたてる
			PaintFlag = true;
		}
	}
	
	
	
	
	
	
	/*-----------------------------------------
	●イベント関数
	
	引数：
	なし
	
	説明：
	トランジション終了関数
	
	-----------------------------------------*/
	function onTransitionCompleted(dest, src)
	{
		TransitionEnd = true;
	}
	
	
	
	
	
	/*-----------------------------------------
	◆画像の読み込み
	
	引数：
	file	画像のファイル名
	
	説明：
	画像を読み込む
	
	-----------------------------------------*/
	function loadImages(file, x = void, y = void , opacity = 255)
	{
		//ファイルチェック
		@if(_DEBUG == 1)
			var filetype = [".bmp",".png",".jpg",".tlg",""];
			var result = false;
			for(var i=0; i<filetype.count; i++){
				if(Storages.isExistentStorage(file+filetype[i])){
					result = true;
					break;
				}
			}
			
			if(!result){
				System.inform( file+"が存在しませんでした" );
				return;
			}
		@endif
		
		
		super.loadImages(file);
		
		super.setSizeToImageSize();
		
		//座標指定
		if( (x !== void) && (y !== void) ){
			super.setPos(x, y);
		}
		
		//透明度
		super.opacity = opacity;
		
		//画像の保持
		ResFile = file;
	}
	
	
	
	
	
	/*-----------------------------------------
	◆ファイルコピー
	
	
	説明：
	画像からのコピー
	
	-----------------------------------------*/
	function copyRect( x, y, src, sl = void, st = void, sw = void, sh = void)
	{
		if( sl === void )sl = 0;
		
		if( st === void )st = 0;
		
		if( sw === void )sw = this.width;
		
		if( sh === void )sh = this.height;
		
		
		super.copyRect( x, y, src, sl, st, sw, sh );
	}
	
	
	
	
	
	
	
	/*-----------------------------------------
	◆矩形コピー
	
	
	説明：
	画像からのコピー
	
	-----------------------------------------*/
	function fileCopyRect(dleft, dtop, src, sleft, stop, swidth, sheight)
	{
		/*if(sleft < 0){
			swidth = swidth + sleft;
			sleft  = 0;
		}
		
		if(stop < 0){
			sheight = sheight + stop;
			stop    = 0;
		}*/
		
		//画像の保持
		ResFile = src.ResFile;
		
		//ファイルからの転送
		super.copyRect(dleft, dtop, src, sleft, stop, swidth, sheight);
		
		invalidate src;
		
		src = void;
		
		System.doCompact();
		
	}
	
	
	
	
	
	
	/*-----------------------------------------
	◆ファイルコピー
	
	
	説明：
	画像からのアルファブレンドコピー
	
	-----------------------------------------*/	
	function pileRect(dleft, dtop, src, sleft = 0, stop = 0, swidth = this.width, sheight = this.height, opa = 255 )
	{
		Debug.message(super.type);
		super.pileRect(dleft, dtop, src, sleft, stop, swidth, sheight, 255);
	}
	
	
	
	
	
	
	/*-----------------------------------------
	◆ レイヤ塗りつぶし
	-----------------------------------------*/
	function drawRect(color, x = 0, y = 0, w = void ,h = void )
	{
		if( w === void)w = this.width;
		if( h === void)h = this.height;
		
		super.fillRect(x, y, w, h, color );
	}
	
	
	
	/*-----------------------------------------
	◆領域画像の読み込み
	
	引数：
	file	領域画像のファイル名
	
	説明：
	領域画像を読み込む
	
	-----------------------------------------*/
	function loadProvinceImage(file)
	{	//領域画像の読み込み
		super.loadProvinceImage(file);
		
		//領域画像の保持
		MapFile = file;
	}
	
	
	
	
	
	
	
	
	
	/*-----------------------------------------
	◆領域画像の色値取得関数
	
	引数：
	Object	領域画像を関連付けしたオブジェクト
	
	説明：
	関連付けられたレイヤの座標の位置に関わらず
	原点設置にされてしまう領域画像の補正関数
	
	-----------------------------------------*/
	function GetProvincePixel( x = void, y = void)
	{
		if(MapFile == false){return 0;}
		
		if(!MainWnd.WndActiveFlag)return 0;
		
		
		//設置座標
		var obj_x = left + ((PriLayer !== null) ? PriLayer.left : 0);
		
		var obj_y = top  + ((PriLayer !== null) ? PriLayer.top : 0);
		
		var obj_width = width;
		
		var obj_height= height;
		
		var MouseX = (x === void) ? MainWnd.PrimaryLayer.cursorX : x;
		
		var MouseY = (y === void) ? MainWnd.PrimaryLayer.cursorY : y;
		
		
		
		
		//オブジェクトの画像内に無いときは終了
		if((MouseX < obj_x) || ((obj_x+obj_width) < MouseX) ||
		  (MouseY < obj_y)  || ((obj_y+obj_height)< MouseY) ||
		  (obj_width <= (MouseX - obj_x))                   ||
		  (obj_height <= (MouseY - obj_y))
		){
			return 0;
		}
		
		
		return getProvincePixel((MouseX - obj_x), (MouseY - obj_y));
	}
}







/*-----------------------------------------
■ ファイルレイヤオブジェクト

○ 関数用に使う画像だけロードしたオブジェクト
-----------------------------------------*/
class FileLayer extends Layer {
	
	//リソースファイル名
	var ResFile;
	
	
	/*-----------------------------------------
	◆コンストラクタ
	
	引数：
	wnd	メインウィンドウオブジェクト
	
	pri	プライマリレイヤ
	
	-----------------------------------------*/
	function FileLayer(wnd, pri, file)
	{
		super.Layer(wnd, pri);
		
		ResFile = file;
		
		with(super){
			.loadImages(file);
			.setSizeToImageSize();
		}
	}
	
	
	
	
	/*-----------------------------------------
	◆ファイナライズ
	
	引数：
	-----------------------------------------*/
	function finalize()
	{
		super.finalize();
	}

}



@endif


