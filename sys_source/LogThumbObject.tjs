//------------------------------------------------------------------------------
// Note : BASE ADV SYSTEM
// Data : 2012/12/11
// File : LogThumbObject.tjs
// Creator : Kazuyuki Uchino
// Memo :LogThumb Object
//------------------------------------------------------------------------------
@if (__LOGTHUMBOBJECT_TJS__== 0)
@set(__LOGTHUMBOBJECT_TJS__ = 1)




//-----------------------------------------*/
//◆ログジャンプ管理オブジェクト
//-----------------------------------------*/
class _LOGJUMPOBJECT {
	
	/*-----------------------------------------
	◆ パラメータ
	-----------------------------------------*/
	
	var MainWnd;					//メインウィンドウオブジェクト
	
	var LogObj;						//使用ログオブジェクト
	
	var ThumbnailWork;				//LOG 表示の為の作業用サムネイルレイヤ
	
	var ThumbnailFrame;				//LOG 表示の為の作業用サムネイル
	
	var LogData;					//LOG データ配列
	
	var ResultThumbLayer;			//確認サムネイルレイヤ
	
	var JumpParam;					//飛び先指定パラメータ
	
	var JumpActionFlag;				//JUMP実行フラグ
	
	var DataIndex;					//格納INDEX
	
	var NowIndex;					//現在の参照INDEX
	
	
	
	
	
	
	
	/*-----------------------------------------
	◆ コンストラクタ
	-----------------------------------------*/
	function _LOGJUMPOBJECT(wnd)
	{
		MainWnd = wnd;
		
		//通常モードでデータベースタイプがファイルの場合
		f["jumpdata"] = new Array();
		
		//はじめは -1 で
		DataIndex = -1;
		//CreateIndex();
		
	}
	
	
	
	
	
	
	/*-----------------------------------------
	◆ デストラクタ
	-----------------------------------------*/
	function finalize()
	{
		invalidate f["jumpdata"];
	}
	
	
	
	
	
	/*-----------------------------------------
	■ データコピー関数
	-----------------------------------------*/
	function JumpCopy()
	{
		//ログデータを書き出す
		LogDataOutput();
	}
	
	
	
	
	
	
	
	/*-----------------------------------------
	■ サムネイルのサイズを計算する
	-----------------------------------------*/
	function calcThumbnailSize()
	{
		var ratio = MainWnd.WndScreenY / MainWnd.WndScreenX;
		var w = nLOG_THUM_WID;
		var h = (int)(w * ratio);
		
		// サムネイル用ビットマップのサイズを計算
		// サムネイル用画像は 256 色 BMP または 24bit フルカラー BMP
		var size;
		
		if (thumbnailDepth == 8){
		  size = ((((w - 1) >> 2) + 1) << 2) * h + 1024 + 54;
		}else{
		  size = (((w * 3 + 3) >> 2) << 2) * h + 54;
		}
		
		return %[width : w, height : h, size : size];
	}
	
	
	
	
	
	
	/*-----------------------------------------
	■ JUMPパラメータロード
	-----------------------------------------*/
	function JumpParamLoad()
	{
		DataIndex = f["jumpdata"].count - 1;
		
		SetLogUseIndex();
		
		//データ再配置処理
		//if( s["logmax"] != 0 )DataAdjustment();
		
	}
	
	
	
	
	
	
	
	
	/*-----------------------------------------
	■ JUMPパラメータセーブ
	-----------------------------------------*/
	function JumpParamSave( save )
	{
		
	}
	
	
	
	
	
	
	
	
	/*----------------------------------------------------------
	■ JUMPパラメータクリア
	----------------------------------------------------------*/
	function JumpParamClear()
	{
		//削除されていたら作成
		if(f["jumpdata"] === void){
			f["jumpdata"] = new Array();
		}
		
		//配列を削除
		f["jumpdata"].clear();
		
		//はじめは -1 で
		DataIndex = -1;
		//スクリプト側でやらせるのでコメントしておく
		//CreateIndex();
		
		//ガベージを強制的に動かす
		System.doCompact();
		
	}
	
	
	
	
	
	
	
	/*----------------------------------------------------------
	■ JUMP INDEX 再配置
	----------------------------------------------------------*/
	function ResetIndex()
	{
		/*
		for(var i=0; i<f["jumpdata"].count; i++)
		{	//振ろうとしているINDEXと既に同じなら次へ
			if(f["jumpdata"][i]["lognum"] == i)continue;
			
			f["jumpdata"][i]["lognum"] = i;
		}
		*/
	}
	
	
	
	
	
	
	
	/*----------------------------------------------------------
	■ LOG DATA 調整処理
	----------------------------------------------------------*/
	function DataAdjustment( logmax = void )
	{
		
		/*
		//LOG OBJECT画面からは操作できない
		if(MainWnd.MessObj.LogObject !== void)return;
		
		//LOGの最大値を更新する
		if(logmax !== void)s["logmax"] = logmax;
		
		if(s["logmax"] < f["jumpdata"].count)
		{//調整処理
			//増えているデータを削除する
			while(s["logmax"] != f["jumpdata"].count)f["jumpdata"].shift();
		}
		
		
		//INDEX 振り直し
		ResetIndex();
		
		//カウントを修正する
		MainWnd.MessObj.lognum = f["jumpdata"].count;
		
		f["lognum"]            = f["jumpdata"].count;
		*/
	}
	
	
	
	
	
	/*-----------------------------------------
	■ INDEXの作成
	-----------------------------------------*/
	function CreateIndex( daystr )
	{
		//文字列を格納
		f["daystring"] = daystr;
		
		//INDEXをずらす
		++DataIndex;
		
		//削除されていたら作成
		if(f["jumpdata"] === void){
			f["jumpdata"] = new Array();
		}
		
		//辞書配列の作成
		f["jumpdata"][DataIndex] = new Array();
		
		//現在の参照INDEXは格納INDEXと同じ
		SetLogUseIndex();
		
		//ログカウントもクリアする
		f["lognum"] = 0;
	}
	
	
	
	/*-----------------------------------------
	■ INDEX設定
	-----------------------------------------*/
	function SetLogUseIndex()
	{
		//現在の参照INDEXは格納INDEXと同じ
		NowIndex = DataIndex;
	}
	
	
	
	
	/*-----------------------------------------
	■ 現在のJUMP配列位置を取得
	-----------------------------------------*/
	function GetJumpDataIndex()
	{
		return &(f["jumpdata"][NowIndex]);
	}
	
	
	
	
	
	
	/*-----------------------------------------
	■ 参照LOG位置を変更する
	-----------------------------------------*/
	function ChageLogIndex( val )
	{
		//true なら加算 false なら減算
		if(val == 1){
			if((f["jumpdata"].count-1) < (NowIndex+1))return false;
			
			++NowIndex;
		}else if(val == -1){
			//先頭に戻す
			if((NowIndex-1) < 0)return false;
			
			--NowIndex;
			
		}else if(val == 2){
		//先頭に戻す
			if(NowIndex == DataIndex)return false;
			SetLogUseIndex();
			
		}else if(val == -2){
		//最後に戻す
			if(NowIndex == 0)return false;
			NowIndex = 0;
			
		}
		
		return true;
	}
	
	
	
	
	
	/*-----------------------------------------
	■ ログデータ書き出す
	-----------------------------------------*/
	function LogDataOutput()
	{
		//INDEXをずらさないで使用した場合は強制で0へ
		if(DataIndex == -1){
			f["daystring"] = "　　　　　";
			NowIndex = DataIndex = 0;
			f["jumpdata"][ DataIndex ] = new Array();
		}
		
		
		
		//辞書配列の作成
		(f["jumpdata"][ DataIndex ]).add( new Dictionary() );
		
		//INDEXの作成
		var unique_inx = ((f["jumpdata"][ DataIndex ]).count-1);
		
		/*
		if((s["logmax"] != 0) && (s["logmax"] <= unique_inx))
		{//許容値を超えているので先頭データを破棄する
			(f["jumpdata"][ DataIndex ]).shift();
			
			//カウント再計算
			unique_inx = ((f["jumpdata"][ DataIndex ]).count-1);
			
			//INDEX 振り直し
			ResetIndex();
			
			//カウントを修正する
			MainWnd.MessObj.lognum = unique_inx;
			
			f["lognum"]            = unique_inx;
		}
		*/
		
		//参照をCOPYする
		var JumpData = f["jumpdata"][ DataIndex ][unique_inx];
		
		JumpData["scenario_size"] = Storages.fstat(Storages.getPlacedPath(f["scenario"])).size;
		
		JumpData["scenario"]      = f["scenario"];
		JumpData["mess"]          = f["lastmess"];
		JumpData["name"]          = f["name"];
		JumpData["lognum"]        = f["jumpdata"][ DataIndex ].count;
		JumpData["hitret_cnt"]    = MainWnd.MessObj.hitret_cnt;
		JumpData["daystring"]     = f["daystring"];
		
		
		//メディア系情報
		for(var i=0; i<nVOICE_MAXNUM; i++){
			if(f["voiceplay"+i] !== void)JumpData["voice"+i]    = f["voiceplay"+i];
			if(f["voicepan"+i]  !== void)JumpData["voicepan"+i] = f["voicepan"+i];
		}
		
		if(f["bgm"] !== void)JumpData["bgm"]            =  f["bgm"];
		if(f["bgmpause"] !== void)JumpData["bgmpause"]  =  f["bgmpause"];
		if(f["bgmpan"] !== void)JumpData["bgmpan"]      =  f["bgmpan"];
		
		for(var i=0; i<nSE_MAXNUM; i++){
			if(f["seloop"+i] !== void)JumpData["seloop"+i] = f["seloop"+i];
			if(f["sepause"+i]!== void)JumpData["sepause"+i]= f["sepause"+i];
			if(f["sepan"+i]  !== void)JumpData["sepan"+i]  = f["sepan"+i];
			if(f["se"+i]     !== void)JumpData["se"+i]     = f["se"+i];
		}
		
		
		
		
		//画像関係の情報
		for(var i=0; i<nIMAGEMAX; i++)
		{
			var inx = "imagefile%d".sprintf(i);
			
			if(f[inx] !== void){
				//画像必須データ
				JumpData[inx]               = f[inx];
				JumpData[inx+"_x"]          = f[inx+"_x"];
				JumpData[inx+"_y"]          = f[inx+"_y"];
				JumpData[inx+"_opacity"]    = f[inx+"_opacity"];
				JumpData[inx+"_width"]      = f[inx+"_width"];
				JumpData[inx+"_height"]     = f[inx+"_height"];
				JumpData[inx+"_type"]       = f[inx+"_type"];
				JumpData[inx+"_absolute"]   = f[inx+"_absolute"];
				
				//拡張データ
				if(f[inx + "zoom"] !== void)JumpData[inx + "zoom"]           = f[inx + "zoom"];
				if(f[inx + "zoom_type"] !== void)JumpData[inx + "zoom_type"] = f[inx + "zoom_type"];
				if(f[inx + "rate"])JumpData[inx + "rate"]                    = f[inx + "rate"];
				if(f[inx+"_color_flag"])JumpData[inx+"_color_flag"]          = f[inx+"_color_flag"];
				if(f[inx+"_color"])JumpData[inx+"_color"]                    = f[inx+"_color"];
				if(f[inx + "_gray"])JumpData[inx + "_gray"]                  = f[inx + "_gray"];
				if(f[inx + "_gamma"])JumpData[inx + "_gamma"]                = f[inx + "_gamma"];
				if(f[inx + "_rgamma"])JumpData[inx + "_rgamma"]              = f[inx + "_rgamma"];
				if(f[inx + "_ggamma"])JumpData[inx + "_ggamma"]              = f[inx + "_ggamma"];
				if(f[inx + "_bgamma"])JumpData[inx + "_bgamma"]              = f[inx + "_bgamma"];
				if(f[inx + "_light_flag"])JumpData[inx + "_light_flag"]      = f[inx + "_light_flag"];
				if(f[inx + "_light"])JumpData[inx + "_light"]                = f[inx + "_light"];
				if(f[inx + "_contrast"])JumpData[inx + "_contrast"]          = f[inx + "_contrast"];
				if(f[inx+"shake"])JumpData[inx+"shake"]                      = f[inx+"shake"];
				if(f[inx+"shakewait"])JumpData[inx+"shakewait"]              = f[inx+"shakewait"];
				
			}else if(f[inx+"_color_flag"] !== void){
				JumpData[inx+"_color_flag"] = f[inx+"_color_flag"];
				JumpData[inx+"_color"]      = f[inx+"_color"];
				JumpData[inx+"_opacity"]    = f[inx+"_opacity"];
				JumpData[inx+"_width"]      = f[inx+"_width"];
				JumpData[inx+"_height"]     = f[inx+"_height"];
				JumpData[inx+"_absolute"]   = f[inx+"_absolute"];
				
			}
			
		}
		
		//時間帯処理
		JumpData["BuTimeSelect"] = f["BuTimeSelect"];
		
		//フェイス系情報
		JumpData["facename"]     = f["facename"];
		
	}
	
	
	
	
	
	
	/*-----------------------------------------
	◆ JUMP確認処理
	-----------------------------------------*/
	function LogJumpWork( obj, param, index = void )
	{
		if( param !== void )
		{
			//呼び出されたログオブジェクトの参照
			LogObj = obj;
			
			//パラメータの参照をCOPYしておく
			JumpParam = param;
			
			if(s["dlg_jump"] == true) {
				
				//タイマー停止
				MainWnd.DefaultTimer.enabled = false;
				
				MainWnd.CheckBoxObj = new _CHECKDIALOG(MainWnd, MainWnd.PrimaryLayer, "ここから再開します。よろしいですか？", this.LoadResultFunc, nJUMP_BOX);
				
				//アクティブオブジェクトを変更する
				MainWnd.ActiveObj   = MainWnd.CheckBoxObj;
				
				//タイマー再開
				MainWnd.DefaultTimer.enabled = true;
				
			}else{
				
				//タイマー停止
				MainWnd.DefaultTimer.enabled = false;
				
				MainWnd.CheckBoxResult = true;
				
				LoadResultFunc();
				
			}
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	/*-----------------------------------------
	//■ ロード確認関数
	-----------------------------------------*/
	function LoadResultFunc()
	{
		if( MainWnd.CheckBoxResult )
		{//YES
			
			MainWnd.CheckBoxResult = false;
			
			//タイマー停止
			MainWnd.DefaultTimer.enabled = false;
			
			//アクティブをSAVE・LOADオブジェクトへ変更
			MainWnd.ChangeActive( LogObj );
			
			
			if( JumpParam["scenario"] === void ){
				dm("scenario");
			}else if(f[JumpParam["scenario"]] === void){
				
				dm("data:"+JumpParam["scenario"]);
			}
			
			
			//現在のデータに保存した先頭シナリオフラグを戻す
			for(var i=0; i<nSCENARIOFLAG; i++){
				f["%d".sprintf(i)] = f[JumpParam["scenario"]][i];
			}
			
			//選択肢のデータを戻す
			if( f[JumpParam["scenario"]+"_selans"] !== void ){
				for(var i=0; i<f[JumpParam["scenario"]+"_selans"].count; i++){
					f["selcnt%0d".sprintf(i)] = f[JumpParam["scenario"]+"_selans"][i];
				}
			}
			
			//ログカウントを戻す
			f["lognum"]        = JumpParam["lognum"] + 1;
			f["scenario_size"] = JumpParam["scenario_size"];
			f["scenario"]      = JumpParam["scenario"];
			
			//元に戻すパラメータ
			f["lastmess"]      = JumpParam["mess"];
			f["name"]          = JumpParam["name"];
			f["hitret_cnt"]    = JumpParam["hitret_cnt"];
			
			//画像関係
			for(var i=0; i<nIMAGEMAX; i++)
			{
				//INDEX
				var inx = "imagefile%d".sprintf(i);
				
				//ファイル名が存在する場合はパラメータをコピーする
				if(JumpParam[inx] !== void)
				{
					f[inx]               = JumpParam[inx];						//画像ファイル名
					f[inx+"_x"]          = JumpParam[inx+"_x"];					//X座標
					f[inx+"_y"]          = JumpParam[inx+"_y"];					//Y座標
					f[inx+"_width"]      = JumpParam[inx+"_width"];				//画像幅
					f[inx+"_height"]     = JumpParam[inx+"_height"];			//画像高さ
					f[inx+"rate"]        = JumpParam[inx+"rate"];				//拡大率
					f[inx+"zoom"]        = JumpParam[inx+"zoom"];				//拡大フラグ
					f[inx+"zoom_type"]   = JumpParam[inx+"zoom_type"];			//拡大TYPE
					f[inx+"shake"]       = JumpParam[inx+"shake"];				//振動演出
					f[inx+"shakewait"]   = JumpParam[inx+"shakewait"];			//振動停止
					f[inx+"_opacity"]    = JumpParam[inx+"_opacity"];			//透明度
					f[inx+"type"]        = JumpParam[inx+"type"];				//レイヤタイプ
					f[inx+"_absolute"]   = JumpParam[inx+"_absolute"];			//レイヤ番号
					f[inx + "_gray"]     = JumpParam[inx+"_gray"];				//グレイフラグ
					f[inx + "_gamma"]    = JumpParam[inx+"_gamma"];				//ガンマフラグ
					f[inx + "_rgamma"]   = JumpParam[inx+"_rgamma"];			//Rガンマ値
					f[inx + "_ggamma"]   = JumpParam[inx+"_ggamma"];			//Gガンマ値
					f[inx + "_bgamma"]   = JumpParam[inx+"_bgamma"];			//Bガンマ値
					f[inx+"_color"]      = JumpParam[inx+"_color"];				//色値
					f[inx+"_color_flag"] = JumpParam[inx+"_color_flag"];		//カラーフラグ
					f[inx+"_light_flag"] = JumpParam[inx+"_light_flag"];		//ライトフラグ
					f[inx+"_light"]      = JumpParam[inx+"_light"];				//ライト値
					f[inx+"_contrast"]   = JumpParam[inx+"_contrast"];			//コントラスト
				}
				else
				{//ファイル名が無い場合は全てクリアしておく
					
					f[inx]               = void;				//画像ファイル名
					f[inx+"_x"]          = void;				//X座標
					f[inx+"_y"]          = void;				//Y座標
					f[inx+"_width"]      = void;				//画像幅
					f[inx+"_height"]     = void;				//画像高さ
					f[inx+"rate"]        = void;				//拡大率
					f[inx+"zoom"]        = void;				//拡大フラグ
					f[inx+"zoom_type"]   = void;				//拡大TYPE
					f[inx+"shake"]       = void;				//振動演出
					f[inx+"shakewait"]   = void;				//振動停止
					f[inx+"type"]        = void;				//レイヤタイプ
					f[inx+"_absolute"]   = void;				//レイヤ番号
					f[inx + "_gray"]     = void;				//グレイフラグ
					f[inx + "_gamma"]    = void;				//ガンマフラグ
					f[inx + "_rgamma"]   = void;				//Rガンマ値
					f[inx + "_ggamma"]   = void;				//Gガンマ値
					f[inx + "_bgamma"]   = void;				//Bガンマ値
					f[inx+"_light_flag"] = void;				//ライトフラグ
					f[inx+"_light"]      = void;				//ライト値
					f[inx+"_contrast"]   = void;				//コントラスト
					
					if( JumpParam[inx+"_color_flag"] !== void ){
						f[inx+"_color"]      = JumpParam[inx+"_color"];			//色値
						f[inx+"_color_flag"] = JumpParam[inx+"_color_flag"];	//カラーフラグ
						f[inx+"_opacity"]    = JumpParam[inx+"_opacity"];		//透明度
						f[inx+"_x"]          = JumpParam[inx+"_x"];				//X座標
						f[inx+"_y"]          = JumpParam[inx+"_y"];				//Y座標
						f[inx+"_width"]      = JumpParam[inx+"_width"];			//画像幅
						f[inx+"_height"]     = JumpParam[inx+"_height"];		//画像高さ
					}else{
						f[inx+"_color"]      = void;							//色値
						f[inx+"_color_flag"] = void;							//カラーフラグ
					}
					
				}
			}
			
			
			
			//フェイス系情報
			f["facename"] = JumpParam["facename"];
			
			//マルチメディア系
			f["bgm"]           = JumpParam["bgm"];
			f["bgmpause"]      = JumpParam["bgmpause"];
			f["bgmpan"]        = JumpParam["bgmpan"];
			
			for(var i=0; i<nSE_MAXNUM; i++){
				f["seloop"+i]  = JumpParam["seloop"+i];
				f["sepause"+i] = JumpParam["sepause"+i];
				f["sepan"+i]   = JumpParam["sepan"+i];
				f["se"+i]      = JumpParam["se"+i];
			}
			
			for(var i=0; i<nVOICE_MAXNUM; i++){
				f["voiceplay"+i] = JumpParam["voice"+i];
				f["voicepan"+i]  = JumpParam["voicepan"+i];
			}
			
			
			
			//このデータより先は使用しないので、LOGDATAから削除する
			for(var i=f["jumpdata"].count-1; NowIndex < i; i--){
				
				for(var t=0; t<f["jumpdata"][i].count-1; t++){
					invalidate f["jumpdata"][i][t];
				}
				
				f["jumpdata"][i].clear();
				invalidate f["jumpdata"][i];
				f["jumpdata"].erase( i );
			}
			
			
			
			for(var i=(f["lognum"]-1); i<f["jumpdata"][NowIndex].count; i++){
				
				if(f["jumpdata"][NowIndex][i] === void)continue;
				
				//voidをいれておく
				f["jumpdata"][NowIndex][i]      = void;
			}
			
			//voidの要素を削除する
			while(f["jumpdata"][NowIndex][f["jumpdata"][NowIndex].count-1] === void){
				f["jumpdata"][NowIndex].erase( f["jumpdata"][NowIndex].count-1 );
			}
			
			//ログ保存数の変更
			f["lognum"] = f["jumpdata"][NowIndex].count;
			
			//実行フラグを立てる
			JumpActionFlag = true;
			
			//JUMP実行
			MainWnd.JumpDataAction();
			
			//右クリックで画面破棄
			LogObj.RightMouseUpAction();
			
			//タイマー再開
			MainWnd.DefaultTimer.enabled = true;
			
			return;
			
		}else{
			//JUMP先画像を消去
			LogObj.LogScreenErase();
			
			//アクティブをSAVE・LOADオブジェクトへ変更
			MainWnd.ChangeActive( LogObj );
			
			LogObj.MapRes = 0;
			LogObj.TempRes= 0;
		}
		
		//MEDIA系を戻す
		MainWnd.onActivate();
		
		//タイマー再開
		MainWnd.DefaultTimer.enabled = true;
	}
	
}




@endif

