//------------------------------------------------------------------------------
// Note : BASE ADV SYSTEM
// Data : 2008/01/02
// File : Utility.tjs
// Creator : Kazuyuki Uchino
// Memo : Utility Function
//------------------------------------------------------------------------------
@if (__UTILITY_TJS__== 0)
@set(__UTILITY_TJS__ = 1)

//※グローバルで使用する便利関数を集めたファイル

/*-----------------------------------------
◆リソースチェック関数

引数:

file	存在確認するリソースファイル

説明
ローカルに指定したファイルが存在するか
かの確認

-----------------------------------------*/
function ResourceCheck(file)
{
	if((file === void) || (file == ""))return false;
	
	return (Storages.isExistentStorage(file));
}





/*-----------------------------------------
◆WAIT関数

引数:

time	停止する時間

説明
Systemを停止する時間

-----------------------------------------*/
function Wait(time)
{
	var BeforTime = System.getTickCount();
	
	var AfterTime = 0;
	
	while(1){
		
		AfterTime = System.getTickCount();
		
		if((BeforTime + time) < AfterTime){ break; }
	}
}





/*-----------------------------------------
◆random関数

引数：
top , max


説明：
ランダム数値を取得する

-----------------------------------------*/
function Random(top, max)
{
	var random_obj = new Math.RandomGenerator();
	
	//ランダム値作成
	var result = random_obj.random32();
	
	//範囲変更をする
	result %= ((max+1)-top);
	
	result += top;
	
	invalidate random_obj;
	
	random_obj = null;
	
	return result;
}








/*-----------------------------------------
■ランダムチェック

引数：
先頭数:top
最大数:max

※最大数以下の数値が得られる

-----------------------------------------*/
function RamdomCheck(top, max)
{
	var random_obj = new Math.RandomGenerator();
	
	//ランダム値作成
	var result = random_obj.random32();
	
	//TOP～MAXを数値に変換
	var top_num    = (real)top;
	
	var max_num    = (real)max;
	
	
	//範囲変更をする
	result %= ((max_num+1)-top_num);
	
	result += top_num;
	
	//オブジェクトの破棄
	invalidate random_obj;
	
	random_obj = null;
	
	return result;
}





/*-----------------------------------------
◆debugInfo関数

引数：
message


説明：
デバッグ用メッセージを表示する

-----------------------------------------*/
function DebugMess(message)
{
	//タイマー停止
	if(MainObj !== void && MainObj.DefaultTimer !== void)MainObj.DefaultTimer.enabled = false;
	
	System.inform(message);
	
	if(MainObj !== void && MainObj.DefaultTimer !== void)MainObj.DefaultTimer.enabled = true;
	
}





/*-----------------------------------------
◆色定数取得関数

引数：
name


説明：
色文字から定数を取得する

-----------------------------------------*/
function getColor(name)
{
	if (name === void) return 0;

	switch (name) {
		case "coBLACK":		return 0x000000;
		case "coWHITE":		return 0xffffff;
		case "coRED":		return 0xff0000;
		case "coGREEN":		return 0x00ff00;
		case "coBLUE":		return 0x0000ff;
		case "coAQUA":		return 0x00ffff;
		case "coPURPLE":	return 0xff00ff;
		case "coYELLOW":	return 0xffff00;
		default : return 0;
	}
}





/*-----------------------------------------
◆色定数取得関数

引数：
name


説明：
色文字から定数を取得する

-----------------------------------------*/
function getDrawLayerType(name)
{
	if (name === void) return ltAlpha;

	switch (name) {
		case "ltAlpha":			return ltAlpha;
		case "ltAddAlpha":		return ltAddAlpha;
		case "ltAdditive":		return ltAdditive;
		case "ltSubtractive":	return ltSubtractive;
		case "ltMultiplicative":return ltMultiplicative;
		case "ltDodge":			return ltDodge;
		case "ltDarken":		return ltDarken;
		case "ltLighten":		return ltLighten;
		case "ltScreen":		return ltScreen;
		default : return name;
	}
}








/*-----------------------------------------
◆ID取得関数

引数：
id


説明：
IDから文字を獲得する

-----------------------------------------*/
function getCharID(id) {

	//var strid = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	//"ELM" はフラグで追加
	
	var strid = "ABCDFGK";
	
	if(s["CHAR_E_OPEN"] == true)strid += "E";
	if(s["CHAR_L_OPEN"] == true)strid += "L";
	if(s["CHAR_M_OPEN"] == true)strid += "M";
	
	if(9 < id ){
	//その他 も ランダムにしておく
		
		id = RamdomCheck(0, (strid.length-1));
		
	}
	
	//晴乃
	if( (id == 8) && (s["CHAR_L_OPEN"] == true) ){
		return "L";
	}else if( (id == 9) && (s["CHAR_M_OPEN"] == true) ){
	//氷雨
		return "M";
	}
	
	
	return strid[id];
}






/*-----------------------------------------
◆パス設定関数

引数:

path 登録するパス

説明
検索するリソースパスを設定する
-----------------------------------------*/
function SetPath( path )
{
	Storages.addAutoPath(System.exePath + path);
}






/*-----------------------------------------
◆CSV FILE呼び出し関数

引数:


説明
CSV FILEからデータを読み込む
取得したCSVは行ごとに配列の形で取得される

-----------------------------------------*/
function LoadCSVFile( csvfile )
{
	//file check
	if( !ResourceCheck(csvfile) )return void;
	
	//格納用配列
	var ResultArray = new Array();
	
	//CSV Fileからリソース名を呼び出す
	var CSV = new CSVParser();
	//CSVからファイルを読みとる
	CSV.initStorage( csvfile );
	
	while(1)
	{
		var csv_line = CSV.getNextLine();
		if(csv_line === void)break;
		
		ResultArray.add( csv_line );
	}
	
	return ResultArray;
}






@endif

